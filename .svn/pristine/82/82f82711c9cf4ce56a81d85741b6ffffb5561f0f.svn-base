/*
 * TCSS 305: Assignment 5 - PowerPaint
 * PowerPaintGUI Class
 */

package gui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;

import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JSlider;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;

/**
 * Class for creating the PowerPaint GUI. 
 * @author Austin Ingraham
 * @version 9 November 2015
 */
public final class PowerPaintGUI extends JPanel {

    /** Serial ID for PowerPaintGUI. */
    private static final long serialVersionUID = 2144639768936849562L;
    
    /** JFrame window which holds the content. */
    private final JFrame myWindow;
    
    /** Component to represent a menu bar at the top of the window. */
    private final JMenuBar myMenuBar;
    
    /** Component to represent a toolbar at the bottom of the window. */
    private final JToolBar myToolBar;
    
    /** ButtonGroup to hold the ToolBar radio buttons. */
    private final ButtonGroup myToolGroup;
    
    /** Area to paint shapes/lines. */
    private final DrawingPanel myDrawingPanel;
    
    /** Constructor for the PowerPaint GUI. */
    public PowerPaintGUI() {
        super(); //TODO pass new BorderLayout?
        
        myWindow = new JFrame("PowerPaint");
        myMenuBar = new JMenuBar(); 
        myToolBar = new JToolBar("Drawing Tools");
        myToolGroup = new ButtonGroup();
        myDrawingPanel = new DrawingPanel();
    }
    
    /** Start method to create and display the GUI. */
    public void start() {
        setUpComponents();
        
        myWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        myWindow.setContentPane(this);
        myWindow.pack();
        myWindow.setMinimumSize(new Dimension(myWindow.getSize()));
        myWindow.setVisible(true);
    }
    
    /** SetUp method to prepare the components of the GUI for display. */
    private void setUpComponents() {
        setLayout(new BorderLayout());
        
        final ImageIcon icon = new ImageIcon("images/w.gif");
        myWindow.setIconImage(icon.getImage());
        
        buildMenuBar(); // ADD TOP-LEVEL MENU ITEMS
        buildToolBar();
        myWindow.setJMenuBar(myMenuBar);
        add(myDrawingPanel, BorderLayout.CENTER);
        add(myToolBar, BorderLayout.PAGE_END);
    }
    
    /** Top-level helper method to create the menu bar displayed at top of window. */
    private void buildMenuBar() {
        myMenuBar.add(buildFileMenu()); //FILE MENU
        myMenuBar.add(buildOptionsMenu());
        myMenuBar.add(buildToolsMenu());
        myMenuBar.add(buildHelpMenu());
    }
    
    /**
     * Builds the File menu of the menu bar.
     * 
     * @return menu with some menu items.
     */
    private JMenu buildFileMenu() { 
        final JMenu menu = new JMenu("File");
        final JMenuItem undoItem = new JMenuItem("Undo All");
        final JMenuItem exitItem = new JMenuItem("Exit");
        
        undoItem.setToolTipText("Removes all drawn shapes.");
        exitItem.setToolTipText("Exits the program.");
        
        menu.setMnemonic(KeyEvent.VK_F);
        undoItem.setMnemonic(KeyEvent.VK_U);
        exitItem.setMnemonic(KeyEvent.VK_X);

        menu.add(undoItem);
        menu.addSeparator();
        menu.add(exitItem);
        return menu;
    }
    
    /**
     * Builds the Options menu of the menu bar.
     * 
     * @return menu with some menu items.
     */
    private JMenu buildOptionsMenu() {
        final JMenu menu = new JMenu("Options");
        
        menu.setMnemonic(KeyEvent.VK_O);
        
        menu.add(buildGridCheckBox());
        menu.addSeparator();
        menu.add(buildThicknessSubMenu());
        menu.addSeparator();
        menu.add(buildColorChooser());
        return menu;
    }
    
    /**
     * Builds the GridCheckBox menu item for the Options menu.
     * When clicked, toggles a grid overlay on/off.
     * 
     * @return JCheckBoxMenuItem to toggle grid overlay.
     */
    private JCheckBoxMenuItem buildGridCheckBox() {
        final JCheckBoxMenuItem gridCheckBox = new JCheckBoxMenuItem();
        final String onMsg = "Grid ON/off";
        final String offMsg = "Grid on/OFF";
        gridCheckBox.setText(offMsg);
       
        gridCheckBox.setToolTipText("When checked, covers the drawing panel with a grid.");
        
        gridCheckBox.setMnemonic(KeyEvent.VK_G);
        gridCheckBox.setSelected(false);

        return gridCheckBox;
    }
    
    /**
     * Builds the Thickness sub-menu for the Options menu.
     * When clicked, displays a slider to choose variable thickness for drawing tools.
     * 
     * @return menu with some menu items.
     */
    private JMenu buildThicknessSubMenu() {
        final JMenu thicknessSub = new JMenu("Thickness");
        final JSlider thickSlider = new JSlider(0, 20);
        final int majorThickness = 5;
        thickSlider.setMajorTickSpacing(majorThickness);
        thickSlider.setMinorTickSpacing(1);
        //TODO need labels on major tick spacing
        
        thickSlider.setValue(1);
        thicknessSub.setMnemonic(KeyEvent.VK_T);
        thicknessSub.add(thickSlider);
        return thicknessSub;
    }
    
    /**
     * Builds the Color Chooser sub-menu for the Options menu.
     * When clicked, opens up the color-chooser interface to choose a drawing color.
     * 
     * @return menu with a color chooser.
     */
    private JMenuItem buildColorChooser() {
        final JMenuItem chooseColor = new JMenuItem("Color...");
        chooseColor.setMnemonic(KeyEvent.VK_C);
    
        //TODO finish color chooser logic
        return chooseColor;
    }
    
    /**
     * Builds the Tools menu for the menu bar.
     * When clicked, displays a group of radio buttons for drawing on the drawing panel.
     * 
     * @return menu with some radio buttons.
     */
    private JMenu buildToolsMenu() {
        final JMenu menu = new JMenu("Tools");
        final JRadioButtonMenuItem pencilRadio = new JRadioButtonMenuItem("Pencil");
        final JRadioButtonMenuItem lineRadio = new JRadioButtonMenuItem("Line");
        final JRadioButtonMenuItem rectangleRadio = new JRadioButtonMenuItem("Rectangle");
        final JRadioButtonMenuItem ellipseRadio = new JRadioButtonMenuItem("Ellipse");

        menu.setMnemonic(KeyEvent.VK_T);
        pencilRadio.setMnemonic(KeyEvent.VK_P);
        lineRadio.setMnemonic(KeyEvent.VK_L);
        rectangleRadio.setMnemonic(KeyEvent.VK_R);
        ellipseRadio.setMnemonic(KeyEvent.VK_E);

        myToolGroup.add(pencilRadio);
        myToolGroup.add(lineRadio);
        myToolGroup.add(rectangleRadio);
        myToolGroup.add(ellipseRadio);
        
        menu.add(pencilRadio);
        menu.add(lineRadio);
        menu.add(rectangleRadio);
        menu.add(ellipseRadio);
        
        return menu;
    }
    
    /**
     * Builds the Help menu for the menu bar.
     * When clicked, displays a pop-up with info about the PowerPaint program.
     * 
     * @return menu with some menu items.
     */
    private JMenu buildHelpMenu() {
        final JMenu menu = new JMenu("Help");
        final JMenuItem aboutPopUp = new JMenuItem("About...");
        
        aboutPopUp.addActionListener(new ActionListener() {
            
            @Override
            public void actionPerformed(final ActionEvent theEvent) { 
                final String message = "TCSS 305 PowerPaint, Autumn 2015. By Austin Ingraham"; 
                javax.swing.JOptionPane.showMessageDialog(null, message, 
                                      "About", JOptionPane.INFORMATION_MESSAGE);
            }
        });
        
        menu.setMnemonic(KeyEvent.VK_H);
        aboutPopUp.setMnemonic(KeyEvent.VK_A);
        
        menu.add(aboutPopUp);
        
        return menu;
    }
    
    /** Builds the ToolBar which exists at the bottom of the layout. */
    private void buildToolBar() {
        final JToggleButton pencilTool = new JToggleButton("Pencil");
        final JToggleButton lineTool = new JToggleButton("Line");
        final JToggleButton rectangleTool = new JToggleButton("Rectangle");
        final JToggleButton ellipseTool = new JToggleButton("Ellipse");
        
        final ButtonGroup toolGroup = new ButtonGroup();
        toolGroup.add(pencilTool);
        toolGroup.add(lineTool);
        toolGroup.add(rectangleTool);
        toolGroup.add(ellipseTool);
        
        pencilTool.setIcon(new ImageIcon("images/pencil.gif"));
        lineTool.setIcon(new ImageIcon("images/line.gif"));
        rectangleTool.setIcon(new ImageIcon("images/rectangle.gif"));
        ellipseTool.setIcon(new ImageIcon("images/ellipse.gif"));
        
        myToolBar.add(pencilTool);
        myToolBar.add(lineTool);
        myToolBar.add(rectangleTool);
        myToolBar.add(ellipseTool);
    }
}


