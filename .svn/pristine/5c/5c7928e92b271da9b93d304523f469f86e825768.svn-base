/*
 * TCSS 305: Assignment 5 - PowerPaint
 * DrawingPanel Class
 */

package gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JPanel;
import javax.swing.event.MouseInputAdapter;

import tools.ToolInterface;

/**
 * Class for handling the drawing panel of the GUI upon which the user draws.
 * Based on the DrawingArea demo written by Charles Bryan.
 *  @author Austin Ingraham
 *  @version 20 November 2015 
 */
public class DrawingPanel extends JPanel implements PropertyChangeListener {
    
    /**  A generated serial version UID for object Serialization. */
    private static final long serialVersionUID = 1144639778936649562L;
    
    /** The default width value. */
    private static final int DEFAULT_WIDTH = 400; 
    
    /** The default height value. */
    private static final int DEFAULT_HEIGHT = 200;
    
    /** The minimum size this component should be. */
    private static final Dimension MIN_SIZE = new Dimension(DEFAULT_WIDTH, DEFAULT_HEIGHT);
    
    /** Current thickness value to draw new shapes. */
    private int myThickness;
    
    /** Boolean value to track if this is the first mouse-click or second. */
    private boolean myIsDrawing;
    
    /** Current selected tool for drawing shapes. */
    private ToolInterface mySelectedTool;
    
    /** Shape presently being drawn. */
    private Shape myCurrentShape;
    
    /** List containing all finished shapes. */
    private final List<Shape> myFinishedShapes;
    
    /** Constructs a blank, white drawing area. */
    public DrawingPanel() {
        super();
        
        myIsDrawing = false;
        myThickness = 1; //default thickness
        
        myFinishedShapes = new ArrayList<Shape>();
        setBackground(Color.white);
        setOpaque(true);

        addMouseListener(new MyMouseInputAdapter());
    }
    
    /**
     * Method to paint all of the shapes as well as grid onto the drawingPanel.
     * @param theGraphics object to handle rendering.
     */
    @Override
    protected void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setStroke(new BasicStroke(myThickness));
        
        for (final Shape s : myFinishedShapes) {
            g2d.setStroke(new BasicStroke(myThickness));
            g2d.draw(s);
        }
        
        System.out.println("IsDrawing: " + myIsDrawing);
        if (myIsDrawing) {
            g2d.setStroke(new BasicStroke(myThickness));
            g2d.draw(myCurrentShape);
        }
//        g2d.draw(Objects.requireNonNull(myCurrentShape)); CRASHES PROGRAM
    };
 
    /** The minimum size of this drawingPanel. */
    @Override
    public Dimension getMinimumSize() {
        return MIN_SIZE;
    }
 
    /** The preferred size of this drawingPanel. */
    @Override
    public Dimension getPreferredSize() {
        return MIN_SIZE;
    }
    
    /**
     * Sets the thickness of the current shape being drawn.
     * @param theThickness int value representing thickness.
     */ //TODO CURRENTLY SETS THICKNESS OF ALL SHAPES
    public void setThickness(final int theThickness) {
        if (theThickness > 0) {
            myThickness = theThickness;
        } else {
            myThickness = 0;
            //TODO if thickness is 0, set a bool to false so it isn't drawn.
        }
    }
    
    /**
     * Sets what tool is currently active, for the purpose of only using one at a time.
     * @param theTool what tool should be active.
     */
    public void setSelectedTool(final ToolInterface theTool) {
        mySelectedTool = theTool; //TODO check for null?
    }
    
    /**
     * Set the shape currently being drawn.
     * @param theShape current shape being drawn.
     */
    public void setCurrentShape(final Shape theShape) {
        myCurrentShape = theShape;
    }
    
    /**
     * Returns the currently selected tool.
     * @return mySelectedTool whatever tool is currently active.
     */
    public ToolInterface getSelectedTool() {
        return mySelectedTool;
    }
    
    /**
     * Adds a newly finished shape to the list of finished shapes.
     * @param theShape a newly finished shape.
     */
    public void addFinishedShape(final Shape theShape) {
        myIsDrawing = false;
        myFinishedShapes.add(theShape);
    }
    
    /**
     * When the drawingPanel changes.
     * @param theEvent a change event.
     */
    @Override
    public void propertyChange(final PropertyChangeEvent theEvent) {
        // TODO Auto-generated method stub
        System.out.println("Drawing Area detected a change!");
        
    }
    
    /**
     * MouseInputAdapter class to listen for mouse input on the drawingPanel.
     * 
     * @author Austin Ingraham
     * @version 17 November 2015 
     */ //TODO display a mouse cursor when hovering over the drawing panel!
    class MyMouseInputAdapter extends MouseInputAdapter {

        /**
         * Method to handle when a mouse clicks on the drawing panel. 
         * Begins the drawing process.
         * @param theEvent a mouse-click.
         */
        @Override
        public void mouseClicked(final MouseEvent theEvent) {
            myIsDrawing = true;
        }   
    }
}
